package org.bailedout.prevail.chunk;


import org.bailedout.prevail.event.dispatcher.EventDispatcher;
import org.bailedout.prevail.event.factory.DeleteEventFactory;
import org.bailedout.prevail.event.factory.InsertEventFactory;
import org.bailedout.prevail.event.factory.QueryEventFactory;
import org.bailedout.prevail.event.factory.UpdateEventFactory;
import org.bailedout.prevail.exception.DeleteException;
import org.bailedout.prevail.exception.InsertException;
import org.bailedout.prevail.exception.QueryException;
import org.bailedout.prevail.exception.UpdateException;

public interface Chunk<K, V> {
  /**
   * Inserts a Value into this Chunk, returning the Key at which the get can be retrieved later.
   *
   * If an EventBus is set on this Chunk, then events from the will be dispatched, as generated by the given
   * InsertEventFactory.  Additionally, if an InsertEventFactory is set on this Chunk, then events generated by that factory
   * will also dispatch.
   */
  K insert(V value, InsertEventFactory<K, V>... customEventFactory) throws InsertException;

  /**
   * Queries a Key from this Chunk, returning a QueryResult from which returned Values can be obtained.
   *
   * If an EventBus is set on this Chunk, then events from the will be dispatched, as generated by the given
   * QueryEventFactory.  Additionally, if a QueryEventFactory is set on this Chunk, then events generated by that factory
   * will also dispatch.
   */
  QueryResult<V> query(K key, QueryEventFactory<K, V>... customEventFactory) throws QueryException;

  /**
   * Updates Keys at this Chunk with the given Value, returning the number of Values updated.
   *
   * If an EventBus is set on this Chunk, then events from the will be dispatched, as generated by the given
   * UpdateEventFactory.  Additionally, if an UpdateEventFactory is set on this Chunk, then events generated by that factory
   * will also dispatch.
   */
  int update(K key, V value, UpdateEventFactory<K, V>... customEventFactory) throws UpdateException;

  /**
   * Deletes Keys at this Chunk, returning the number of Values deleted.
   *
   * If an EventBus is set on this Chunk, then events from the will be dispatched, as generated by the given
   * DeleteEventFactory.  Additionally, if a DeleteEventFactory is set on this Chunk, then events generated by that factory
   * will also dispatch.
   */
  int delete(K key, DeleteEventFactory<K>... customEventFactory) throws DeleteException;

  /**
   * Set the EventBus on which to dispatch events by default.
   * @param eventDispatcher
   */
  void setEventDispatcher(EventDispatcher eventDispatcher);

  /**
   * Set the default InsertEventFactory to use when generating insert events.
   */
  void addEventFactory(InsertEventFactory insertEventFactory);

  /**
   * Set the default QueryEventFactory to use when generating query events.
   */
  void addEventFactory(QueryEventFactory queryEventFactory);

  /**
   * Set the default UpdateEventFactory to use when generating update events.
   */
  void addEventFactory(UpdateEventFactory updateEventFactory);

  /**
   * Set the default DeleteEventFactory to use when generating delete events.
   */
  void addEventFactory(DeleteEventFactory deleteEventFactory);

  public static class EmptyChunk<K, V> implements Chunk<K, V> {

    @Override
    public K insert(final V value, final InsertEventFactory<K, V>... customEventFactory) throws InsertException {
      return null;
    }

    @Override
    public QueryResult<V> query(final K key, final QueryEventFactory<K, V>... customEventFactory) throws QueryException {
      return null;
    }

    @Override
    public int update(final K key, final V value, final UpdateEventFactory<K, V>... customEventFactory) throws UpdateException {
      return 0;
    }

    @Override
    public int delete(final K key, final DeleteEventFactory<K>... customEventFactory) throws DeleteException {
      return 0;
    }

    @Override
    public void setEventDispatcher(final EventDispatcher eventDispatcher) {
      // Empty implementation
    }

    @Override
    public void addEventFactory(final InsertEventFactory insertEventFactory) {
      // Empty implementation
    }

    @Override
    public void addEventFactory(final QueryEventFactory queryEventFactory) {
      // Empty implementation
    }

    @Override
    public void addEventFactory(final UpdateEventFactory updateEventFactory) {
      // Empty implementation
    }

    @Override
    public void addEventFactory(final DeleteEventFactory deleteEventFactory) {
      // Empty implementation
    }
  }
}
